@page "/counter"
@using global::Unstoppable.Blazor

@inject LocalStorageAsync LocalStorageAsync
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount.Current</p>
<DataContainer HasData="@HasUpdated">
  <Template>
    <p role="status">
      Last updated @lastUpdated
    </p>
  </Template>
</DataContainer>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-secondary" @onclick="ClearStore">Clear store</button>

@code {
  private CounterDetails currentCount = new();
  private DateTime lastUpdated = DateTime.MinValue;

  protected override async Task OnInitializedAsync()
  {
    CounterDetails? counter = await LocalStorageAsync.GetItem<CounterDetails>("counter");
    lastUpdated = await LocalStorageAsync.GetItem<DateTime>("lastUpdate");
    if (counter is null)
    {
      await LocalStorageAsync.SetItem("counter", currentCount);
      counter = await LocalStorageAsync.GetItem<CounterDetails>("counter");
    }

    currentCount = counter!;
  }

  private async Task IncrementCount()
  {
    currentCount.Current++;
    lastUpdated = DateTime.Now;
    await LocalStorageAsync.SetItem("counter", currentCount);
    await LocalStorageAsync.SetItem("lastUpdate", lastUpdated);
  }

  private async Task ClearStore()
  {
    await LocalStorageAsync.ClearStoreAsync();
    currentCount = new();
    lastUpdated = DateTime.MinValue;
  }

  private bool HasUpdated => lastUpdated != DateTime.MinValue;
}